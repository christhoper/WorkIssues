//
//  Signature.swift
//  WorkingIssues
//
//  Created by bailun on 2021/3/23.
//

import Foundation

//MARK: - 常用的加密方式
/*
 1、对称秘钥加密：加密方和解密方使用的是一个同样的秘钥；常见的对称密钥加密有AES、DES
 
 2、非对称秘钥加密：又称公开秘钥加密
 非对称秘钥加密需要两个密钥，一个是公开密钥，一个是私有密钥。私有密钥用来加密，公有密钥用来解密。私有密钥由加密方保管，公有密钥则公布出来。常见的非对称加密有RSA、DSA。
 
 3、MD5加密：MD5全称MD5消息摘要算法。严格说，MD5并不是一种加密方式，MD5只是一个哈希算法，对用一个明文生成的密文（哈希值）是统一的。MD5相较于普通的加密来说还有一个优点：MD5生成的密文长度很短（16位或者32位字符）
 */


//MARK: - 数字签名
/*
 一、作用：
 1、保证数据没有被篡改过；
 2、保证数据是经过我认可的；
 如何保证上面两点：使用的是非对称加密+MD5线性加密
 
 
 
 二、数字签名过程：
 1、计算出原始数据的MD5；
 2、生成一对公钥和私钥，使用非对称加密方式，用私钥对上一步生成的MD5摘要进行加密，加密的结果就是数字签名；
 3、在返回数据时，将原始数据和数字签名一起返回给请求数据方。
 
 在请求数据方接收到数据之后，如何确认数据正确以及数据是合法的呢？请求数据方含有公钥，会对数字签名进行验证；
 验证过程：
 1、首先用含有的公钥对数字签名进行解密，如果能够解密成功，说明返回的数据是经过数据发送方认证的，否则数据发送方不会对该数据加密；
 2、对原始的数据使用MD5算法，生成原始数据的摘要；
 3、对比第一步和第二步生成的摘要，如果生成的摘要相等，说明原始数据没有被篡改过。
 由此，通过数字签名可以达到确保数据没有被篡改以及数据是合法的目的
 
 */


//MARK: - 通过App Store下载的App签名机制

/*
 苹果公司生成了一对私钥和公钥，每个iOS系统上都内置有公钥，而私钥保存在苹果后台上。开发者再将app上传到苹果服务器之后，苹果公司使用私钥对app进行数字签名。用户从App Store下载的app，既包含app包，也包含数字签名。下载到本地后，iOS系统使用公钥验证签名，就可以确定该app是经过苹果公司认证且包没有被篡改过。
 
 */
